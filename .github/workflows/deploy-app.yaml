# Github action workflow to deploy the infrastructure
# this workflow is deploy manually from the github actions tab
---
name: App Deploy
on:
  workflow_dispatch:
    inputs:
      cluster-name:
        description: 'Name of the cluster'
        required: true
      service-name:
        description: 'Name of the service'
        required: true
      app-repo:
        description: 'ECR registry repo name'
        required: true
        default: 'n26-app'
      default:
        description: 'wether to deploy the default image or not'
        required: true
        options:
          - 'true'
          - 'false'
        default: 'true'
      region:
        description: 'Region to deploy'
        required: true
        default: 'us-east-1'

permissions:
  id-token: write
  contents: read

env:
  APP_REPO: ${{ github.event.inputs.app-repo }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-session-name: ${{ github.sha }}
          role-to-assume: '${{ secrets.GHA_IAM_ROLE }}'
          aws-region: ${{ github.event.inputs.region }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.APP_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: app/

      - name: Deploy default image to ECS
        if: github.event.inputs.default == 'true'
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$SERVICE_NAME" --region "$AWS_DEFAULT_REGION")

          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$FULL_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')

          NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINITION")

          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')

          aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${NEW_REVISION}
        env:
          AWS_DEFAULT_REGION: ${{ github.event.inputs.region }}
          CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
          SERVICE_NAME: ${{ github.event.inputs.service-name }}
          FULL_IMAGE:  nginx:alpine-slim 
      
      - name: Deploy to ECS
        if: github.event.inputs.default == 'false'
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$SERVICE_NAME" --region "$AWS_DEFAULT_REGION")

          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$FULL_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')

          NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINITION")

          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')

          aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${NEW_REVISION}
        env:
          AWS_DEFAULT_REGION: ${{ github.event.inputs.region }}
          CLUSTER_NAME: ${{ github.event.inputs.cluster-name }}
          SERVICE_NAME: ${{ github.event.inputs.service-name }}
          FULL_IMAGE:  ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO }}:${{ github.sha }}

